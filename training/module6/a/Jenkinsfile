pipeline {
  agent none

  environment {
    docker_label="nljenkinsagent"
    nlw_host="nlweb.shared"
    api_url="http://${env.nlw_host}:8080"
    zone_id="defaultzone"
    full_test_max_vus = 5
    full_test_duration_mins = 3
  }

  stages {
    stage ('Prep workspace') {
      agent any
      steps {
        cleanWs()
        script {
          sh "uname -a"
          env.host_ip = sh(script: "getent hosts ${env.nlw_host} | head -n1 | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])'", returnStdout: true)
          env.agent_name = "${env.VM_HOST_EXT_IP}" // sh(script: "uname -a | tr -s ' ' | cut -d ' ' -f2", returnStdout: true)
        }
      }
    }
    stage('Attach Worker') {
      agent {
        docker {
          image "${env.docker_label}:latest"
          args "--add-host ${env.nlw_host}:${env.host_ip} -e HOME=${env.WORKSPACE} -e PYTHONUNBUFFERED=1"
        }
      }





      stages {
        stage('Prep project files') {
          steps {
            sh 'rm -rf project/'
            sh 'mkdir -p project'
            dir('project/') {
                git url: 'https://github.com/paulsbruce/toscawebtoneoload.git'
            }
            sh 'ls -latr project/'
          }
        }
        stage('Prepare Test Assets') {
          steps {
            writeFile(file: "d.overrides.yaml", text:"""
scenarios:
- name: fullTest
  populations:
  - name: StandardPop
    rampup_load:
      min_users: 1
      max_users: ${env.full_test_max_vus}
      increment_users: 1
      increment_every: 5s
      duration: ${env.full_test_duration_mins}m
- name: sanity
  populations:
  - name: StandardPop
    rampup_load:
      min_users: 1
      max_users: 2
      increment_users: 1
      increment_every: 5s
      duration: 3m
            """)
            writeFile(file: "d.slas.yaml", text:"""
sla_profiles:
- name: geo_3rdparty_sla
  description: SLAs for cached queries, error rates
  thresholds:
  - error-rate warn >= 10% fail >= 30% per interval
  - avg-resp-time warn >= 20ms fail >= 35ms per interval
  - error-rate fail >= 20% per test
            """)
            stash includes: 'd.*.yaml', name: 'dynamics'
          }
        }



        stage('Prepare agent') {
          steps {
            sh 'neoload --version'
            sh 'printenv'
            withCredentials([string(credentialsId: 'NLW_TOKEN', variable: 'NLW_TOKEN')]) {
              sh "neoload login --url ${env.api_url} $NLW_TOKEN"
            }
          }
        }
        stage('Prepare Neoload CLI') {
          steps {
            sh "neoload test-settings --zone ${env.zone_id} --lgs 1 --scenario sanity createorpatch 'example-Jenkins-module6-${env.agent_name}'"
          }
        }
        stage('Upload Test Assets') {
          steps {
            dir('project/') {
              unstash 'dynamics'
            }
            sh "neoload project --path project/ upload"
            sh "neoload status"
          }
        }



        stage('Run a sanity scenario') {
          steps {
            script {
              sanityCode = 3 // default to something absurd
              try {
                wrap([$class: 'BuildUser']) {
                  sanityCode = sh(script: """neoload run \
                        --scenario sanity \
                        --name \"sanity-${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\" \
                        --description \"Started by Jenkins user $BUILD_USER on ${env.agent_name}\" \
                        --as-code d.overrides.yaml \
                        """, returnStatus: true)
                }
              } catch(error) {
                error "Sanity test kickoff error ${error}"
              } finally {
                print "Sanity status code was ${sanityCode}"
                if(sanityCode > 1)
                  error "Sanity test failed so not proceeding to full test!"
                else
                  sh "neoload test-results delete cur" // get rid of successful sanity run results
              }
            }
          }
        }



        stage('Run Test') {
          stages {
            stage('Kick off test async') {
              steps {
                wrap([$class: 'BuildUser']) {
                  sh """neoload run \
                    --scenario fullTest \
                    --name \"fullTest-${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\" \
                    --description \"Started by Jenkins user $BUILD_USER on ${env.agent_name}\" \
                    --detached \
                    --as-code d.overrides.yaml,d.slas.yaml
                   """
                }
              }
            }
            stage('Monitor test') {
              parallel {
                stage('Monitor SLAs') {
                  steps {
                    script {
                      logs_url = sh(script: "neoload logs-url cur", returnStdout: true).trim()
                      echo "Logs url: ${logs_url}"

                      sh "neoload fastfail --max-failure 25 slas cur"
                    }
                  }
                }
                stage('Custom test exit criteria') {
                  steps {
                    script {
                      sleep(time:15,unit:"SECONDS")
                    }
                  }
                }
                stage('Wait for test finale') {
                  steps {
                    script {
                      env.exitCode = sh(script: "neoload wait cur", returnStatus: true)
                      print "Final status code was ${env.exitCode}"
                    }
                  }
                }
              } //end parallel
            }
          } // end stages
          post {
            always {
              sh "neoload test-results junitsla"
              junit testResults: 'junit-sla.xml', allowEmptyResults: true
              archiveArtifacts artifacts: 'd.*.yaml'
            }
          }
        }
      }
    }
  }
}

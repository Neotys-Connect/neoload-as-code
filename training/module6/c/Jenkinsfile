pipeline {
  agent none

  environment {
    docker_label="nljenkinsagent"
    nlw_host="nlweb.shared"
    api_url="http://${env.nlw_host}:8080"
    zone_id="defaultzone"
    full_test_max_vus = 5
    full_test_duration_mins = 3
  }

  parameters {
    base64File 'cities_csv_file'
  }

  stages {
    stage ('Prep workspace') {
      agent any
      steps {
        cleanWs()
        script {
          sh "uname -a"
          env.host_ip = sh(script: "getent hosts ${env.nlw_host} | head -n1 | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])'", returnStdout: true)
          env.agent_name = "${env.VM_HOST_EXT_IP}" // sh(script: "uname -a | tr -s ' ' | cut -d ' ' -f2", returnStdout: true)
        }
      }
    }
    stage('Attach Worker') {
      agent {
        docker {
          image "${env.docker_label}:latest"
          args "--add-host ${env.nlw_host}:${env.host_ip} -e HOME=${env.WORKSPACE} -e PYTHONUNBUFFERED=1"
        }
      }





      stages {
        stage('Parse parameters') {
          steps {
            withFileParameter('cities_csv_file') {
              sh 'echo $cities_csv_file'
              sh 'ls -latr'
              sh 'cp $cities_csv_file input_cities.csv'
            }
          }
        }
        stage('Prepare agent') {
          steps {
            sh 'neoload --version'
            sh 'printenv'
            withCredentials([string(credentialsId: 'NLW_TOKEN', variable: 'NLW_TOKEN')]) {
              sh "neoload login --url ${env.api_url} $NLW_TOKEN"
            }
          }
        }
        stage('Prepare Neoload CLI') {
          steps {
            sh "neoload test-settings --zone ${env.zone_id} --lgs 1 --scenario sanityScenario createorpatch 'example-Jenkins-module6-${env.agent_name}'"
          }
        }
        stage('Prepare Test Assets') {
          steps {
            writeFile(file: "d.variables.yaml", text:"""
variables:
- file:
    name: cities
    path: input_cities.csv
    start_from_line: 1
    delimiter: ","
    is_first_line_column_names: false
    column_names: ["City"]
            """)
            stash includes: 'd.*.yaml', name: 'dynamics'
          }
        }
        stage('Upload Test Assets') {
          steps {
            sh "neoload project --path . upload"
            sh "neoload status"
          }
        }
        stage('Run a sanity scenario') {
          steps {
            dir('tests/neoload_projects/example_1/') {
              unstash 'dynamics'
            }
            script {
              sanityCode = 3 // default to something absurd
              try {
                wrap([$class: 'BuildUser']) {
                  sanityCode = sh(script: """neoload run \
                        --scenario sanityScenario \
                        --name \"sanity-${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\" \
                        --description \"Started by Jenkins user $BUILD_USER on ${env.agent_name}\" \
                        --as-code default.yaml \
                        """, returnStatus: true)
                }
              } catch(error) {
                error "Sanity test kickoff error ${error}"
              } finally {
                print "Sanity status code was ${sanityCode}"
                if(sanityCode > 1)
                  error "Sanity test failed so not proceeding to full test!"
                else
                  sh "neoload test-results delete cur" // get rid of successful sanity run results
              }
            }
          }



        stage('Run Test') {
          steps {
            sh "neoload run --name \"${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\""
          }
          post {
            always {
              sh "neoload test-results junitsla"
              sh "sed -i 's/\\<br\\/\\>/\\n/g' junit-sla.xml"
              junit 'junit-sla.xml'
            }
          }
        }
      }
    }
  }
}
